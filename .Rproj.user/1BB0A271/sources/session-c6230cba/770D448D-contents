# Diretório:

setwd(dirname(rstudioapi::getActiveDocumentContext()$path))



# Pacotes:

library(cli)



# Estudos de Simulação:

# Modelo: y_i = theta0 + theta1*x_i + ϵ_i
# Estamos interessados em testar H0: theta1 ≥ 0



# Função que retorna um heatmap das probabilidades de decisão:

probs_heatmap = function(data, n, theta1, main0 = '') {
  
  par(mar = c(4, 4, 4, 2))
  image(t(data)[, nrow(data):1],
        col = gray(seq(0.98, 0, length = 100)),
        axes = F,
        xlab = expression(n),
        ylab = expression(theta[1]),
        zlim = c(0, 1),
        main = main0)
  axis(1, at = seq(0, 1, length.out = length(n)), labels = n)
  axis(2, at = seq(0, 1, length.out = length(theta1)), labels = sprintf('%.2f', rev(theta1)))
  
}



# Função que calcula o s-valor para testar H0: theta1 ≥ 0

Svalue = function(y, x) {
  
  p = 2
  n = length(x)
  X = as.matrix(cbind(1, x))
  Y = as.matrix(y)
  
  theta_est = solve(t(X) %*% X) %*% t(X) %*% Y
  MSE = t(Y - X %*% theta_est) %*% (Y - X %*% theta_est) / (n-p)
  
  X0 = matrix(X[, 1])
  theta_est0 = solve(t(X0) %*% X0) %*% t(X0) %*% Y
  theta_est0 = rbind(theta_est0, 0)
  
  T_theta0 = t(theta_est0 - theta_est) %*% t(X) %*% X %*% (theta_est0 - theta_est) / (p*MSE)
  
  STheta0 = STheta0_c = NA
  
  if (theta_est[2] >= 0) {
    
    STheta0 = 1
    STheta0_c = 1 - pf(T_theta0, p, n-p)
    
  } else {
    
    STheta0 = 1 - pf(T_theta0, p, n-p)
    STheta0_c = 1
    
  }
  
  return(c(STheta0, STheta0_c))
  
}



# Heatmaps sob H0:

R = 10000
n = c(c(10, 30, 50), seq(100, 1000, 100))
theta0 = 1
theta1 = c(1.00, 0.80, 0.50, 0.20, 0.10, 0.05, 0.03, 0.02, 0.01, 0.00)
sigma = 2

a1 = 0.10
a2 = 0.10

PG0_R = matrix(NA, length(theta1), length(n)) # Rejeição
PG0_A = matrix(NA, length(theta1), length(n)) # Aceitação
PG0_U = matrix(NA, length(theta1), length(n)) # Agnóstico

colnames(PG0_R) = colnames(PG0_A) = colnames(PG0_U) = paste0('n=', n)
rownames(PG0_R) = rownames(PG0_A) = rownames(PG0_U) = paste0('theta1=', theta1)


set.seed(5693)
for (j in 1:length(n)) {
  
  for (k in 1:length(theta1)) {
    
    S = matrix(NA, R, 2)
    cli_progress_message(paste0('n = ', n[j], '; theta1 = ', theta1[k]), current = F, .auto_close = F)
    
    theta = c(theta0, theta1[k])
    
    for (i in 1:R) {
      
      x = runif(n[j], -10, 10)
      e = rnorm(n[j], 0, sigma)
      y = cbind(1, x) %*% theta + e
      
      S[i, ] = Svalue(y, x)
      
    }
    
    PG0_R[k, j] = mean(S[, 1] < a1)
    PG0_A[k, j] = mean(S[, 2] < a2)
    PG0_U[k, j] = mean(S[, 1] >= a1 & S[, 2] >= a2)
    
  }
  
}


pdf('Figuras/HeatmapH0.pdf', width = 18, height = 6)
layout(matrix(1:4, ncol = 4, byrow = F), widths = c(2, 2, 2, 0.2), heights = 1)
probs_heatmap(PG0_R, n, theta1, main0 = '(a) Rejeição')
probs_heatmap(PG0_A, n, theta1, main0 = '(b) Aceitação')
probs_heatmap(PG0_U, n, theta1, main0 = '(c) Agnóstico')
par(mar = c(4, 0, 2, 2))
image(1,
      seq(0, 1, length = 100), 
      t(matrix(seq(0, 1, length = 100))), 
      col = gray(seq(0.98, 0, length = 100)),
      axes = F,
      xlab = '', 
      ylab = '')
axis(4)
dev.off()



# Heatmaps sob H1:

R = 10000
n = c(c(10, 30, 50), seq(100, 1000, 100))
theta0 = 1
theta1 = -c(0.01, 0.02, 0.03, 0.05, 0.10, 0.20, 0.50, 0.80, 1.00)
sigma = 2

a1 = 0.10
a2 = 0.10

PG1_R = matrix(NA, length(theta1), length(n)) # Rejeição
PG1_A = matrix(NA, length(theta1), length(n)) # Aceitação
PG1_U = matrix(NA, length(theta1), length(n)) # Agnóstico

colnames(PG1_R) = colnames(PG1_A) = colnames(PG1_U) = paste0('n=', n)
rownames(PG1_R) = rownames(PG1_A) = rownames(PG1_U) = paste0('theta1=', theta1)


set.seed(9961)
for (j in 1:length(n)) {
  
  for (k in 1:length(theta1)) {
    
    S = matrix(NA, R, 2)
    cli_progress_message(paste0('n = ', n[j], '; theta1 = ', theta1[k]), current = F, .auto_close = F)
    
    theta = c(theta0, theta1[k])
    
    for (i in 1:R) {
      
      x = runif(n[j], -10, 10)
      e = rnorm(n[j], 0, sigma)
      y = cbind(1, x) %*% theta + e
      
      S[i, ] = Svalue(y, x)
      
    }
    
    PG1_R[k, j] = mean(S[, 1] < a1)
    PG1_A[k, j] = mean(S[, 2] < a2)
    PG1_U[k, j] = mean(S[, 1] >= a1 & S[, 2] >= a2)
    
  }
  
}


pdf('Figuras/HeatmapH1.pdf', width = 18, height = 6)
layout(matrix(1:4, ncol = 4, byrow = F), widths = c(2, 2, 2, 0.2), heights = 1)
probs_heatmap(PG1_R, n, theta1, main0 = '(a) Rejeição')
probs_heatmap(PG1_A, n, theta1, main0 = '(b) Aceitação')
probs_heatmap(PG1_U, n, theta1, main0 = '(c) Agnóstico')
par(mar = c(4, 0, 2, 2))
image(1,
      seq(0, 1, length = 100), 
      t(matrix(seq(0, 1, length = 100))), 
      col = gray(seq(0.98, 0, length = 100)),
      axes = F,
      xlab = '', 
      ylab = '')
axis(4)
dev.off()
